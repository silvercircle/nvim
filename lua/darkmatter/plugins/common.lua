-- highlight support for common plugins, including:
-- * nvim-tree
-- * NeoTree
-- * cmp
-- * blink.cmp
-- * GitSigns
-- * Telescope
-- * Mini.pick
-- * Navic
-- * Navbuddy
-- * Cokeline
-- * Glance
-- * snacks

local function _set()
  local c = require("darkmatter")
  local conf = c.get_conf()
  c.hl_with_defaults("NvimTreeNormal", c.P.fg_dim, c.P.treebg)
  c.hl_with_defaults("NvimTreeEndOfBuffer", c.P.bg_dim, c.P.treebg)
  c.hl_with_defaults("NvimTreeVertSplit", c.P.bg0, c.P.bg0)
  c.link("NvimTreeSymlinkFolderName", "Blue")
  c.link("NvimTreeSymlinkFolderIcon", "BlueBold")
  c.link("NvimTreeFolderName", "Green")
  c.link("NvimTreeRootFolder", "Darkyellow")
  c.link("NvimTreeFolderIcon", "GreenBold")
  c.link("NeoTreeDirectoryIcon", "GreenBold")
  c.link("NeoTreeDirectoryName", "GreenBold")

  c.link("NvimTreeEmptyFolderName", "Fg")
  c.link("NvimTreeOpenedFolderName", "GreenBold")
  c.link("NvimTreeExecFile", "Fg")
  c.link("NvimTreeOpenedFile", "Yellow")
  c.link("NvimTreeModifiedFile", "DeepRedBold")
  c.link("NvimTreeBookmarkHL", "Keyword")
  c.link("NvimTreeSpecialFile", "Fg")
  c.link("NvimTreeImageFile", "Fg")
  c.link("NvimTreeMarkdownFile", "Fg")
  c.link("NvimTreeIndentMarker", "SymbolsOutlineConnector")
  c.link("NvimTreeFolderArrowOpen", "SymbolsOutlineConnector")
  c.link("NvimTreeFolderArrowClosed", "SymbolsOutlineConnector")
  c.link("NvimTreeGitDirty", "Yellow")
  c.link("NvimTreeGitStaged", "Blue")
  c.link("NvimTreeGitMerge", "Orange")
  c.link("NvimTreeGitRenamed", "Purple")
  c.link("NvimTreeGitNew", "Green")
  c.link("NvimTreeGitDeleted", "Red")
  c.link("NvimTreeLspDiagnosticsError", "RedSign")
  c.link("NvimTreeLspDiagnosticsWarning", "YellowSign")
  c.link("NvimTreeLspDiagnosticsInformation", "BlueSign")
  c.link("NvimTreeLspDiagnosticsHint", "GreenSign")
  c.link("NvimTreeCursorLine", "TreeCursorLine")

  c.link("MiniNotifyNormal", "TreeNormalNC")
  c.link("MiniNotifyBorder", "CmpBorder")
  c.link("NeoTreeFilenameOpened", "Builtin")
   -- CMP (with custom menu setup)
  c.link("CmpItemMenu", "Comment")
  c.link("CmpItemMenuPath", "Fg")
  c.link("CmpItemMenuDetail", "Include")
  c.link("CmpItemMenuBuffer", "String")
  c.link("CmpItemMenuSnippet", "Number")
  c.link("CmpItemMenuLSP", "Type")
  c.link("CmpItemAbbr", "Fg")
  c.set_hl(0, "CmpItemAbbrDeprecated", { bg = "NONE", strikethrough = true, fg = "#808080" })
  c.link("CmpItemAbbrMatch", "RedBold")
  c.link("CmpItemAbbrMatchFuzzy", "DarkPurpleBold")
  c.hl_with_defaults("CmpPmenu", c.P.fg, c.P.bg_dim)
  c.hl_with_defaults("CmpPmenuBorder", c.P.grey_dim, c.P.bg_dim)
  c.hl_with_defaults("CmpGhostText", c.P.grey, c.NONE)
  c.link("CmpItemKindDefault", "FgDim")
  c.link("CmpItemKind", "CmpItemKindDefault")
  c.link("CmpItemKindStruct", "Structure")
  c.link("CmpItemKindConstructor", "@constructor")
  c.link("CmpItemKindMethod", "Method")
  c.link("CmpItemKindModule", "Include")
  c.link("CmpItemKindFile", "Include")
  c.link("CmpItemKindFolder", "Yellow")
  c.link("CmpItemKindClass", "Class")
  c.link("CmpItemKindVariable", "Fg")
  c.link("CmpItemKindProperty", "Member")
  c.link("CmpItemKindField", "Member")
  c.link("CmpItemKindFunction", "Function")
  c.link("CmpItemKindKeyword", "Keyword")
  c.link("CmpItemKindText", "String")
  c.link("CmpItemKindUnit", "Include")
  c.link("CmpItemKindConstant", "Constant")
  c.link("CmpItemKindEnum", "Constant")
  c.link("CmpItemKindEnumMember", "Constant")
  c.link("CmpItemKindSnippet", "Number")
  c.link("CmpItemKindOperator", "Operator")
  c.link("CmpItemKindInterface", "Interface")
  c.link("CmpItemKindValue", "StorageClass")
  c.link("CmpItemKindEvent", "Keyword")
  c.link("CmpItemKindDict", "Fg")
  c.link("CmpItemKindTypeParameter", "Type")
  c.link("CmpItemKindReference", "Interface")

  c.hl_with_defaults("CmpFloat", c.P.fg_dim, c.P.floatbg)
  c.hl_with_defaults("CmpBorder", c.P.accent, c.P.floatbg)
  c.hl_with_defaults("CmpBrightBack", c.P.fg_dim, c.P.statuslinebg)
  c.link("Pmenu", "CmpFloat")
  c.hl_with_defaults("PmenuSbar", c.NONE, c.P.bg2)
  c.link("PmenuSel", "TreeCursorLine")

  -- blink.cmp
  c.link("BlinkCmpMenu", "CmpFloat")
  c.link("BlinkCmpMenuBorder", "CmpBorder")
  c.link("BlinkCmpDoc", "CmpFloat")
  c.link("BlinkCmpDocBorder", "CmpBorder")
  c.link("BlinkCmpSignature", "CmpFloat")
  c.link("BlinkCmpSignatureBorder", "CmpBorder")
  c.link("BlinkCmpSignatureHelp", "CmpFloat")
  c.link("BlinkCmpSignatureHelpBorder", "CmpBorder")
  c.link("BlinkCmpDocSeparator", "Debug")
  c.link("BlinkCmpDocCursorLine", "CursorLine")
  c.link("BlinkCmpLabel", "CmpItemAbbr")
  c.link("BlinkCmpLabelDetail", "String")
  c.link("BlinkCmpMenuSnippet", "Number")
  c.link("BlinkCmpMenuLSP", "StorageClass")
  c.set_hl(0, "BlinkCmpLabelDeprecated", { bg = "NONE", strikethrough = true, fg = "#808080" })
  c.link("BlinkCmpLabelMatch", "DeepRedBold")
  c.link("BlinkCmpLabelMatchFuzzy", "DarkPurpleBold")
  c.link("BlinkCmpSource", "Brown")
  c.link("BlinkCmpKindDefault", "FgDim")
  c.link("BlinkCmpKind", "CmpItemKindDefault")
  c.link("BlinkCmpKindFile", "Include")
  c.link("BlinkCmpKindFolder", "Yellow")
  c.link("BlinkCmpMenuPath", "CmpItemMenu")
  c.link("BlinkCmpKindStruct", "Structure")
  c.link("BlinkCmpKindConstructor", "@constructor")
  c.link("BlinkCmpKindMethod", "Method")
  c.link("BlinkCmpKindModule", "Include")
  c.link("BlinkCmpKindClass", "Class")
  c.link("BlinkCmpKindVariable", "Fg")
  c.link("BlinkCmpKindProperty", "Member")
  c.link("BlinkCmpKindField", "Member")
  c.link("BlinkCmpKindFunction", "Function")
  c.link("BlinkCmpKindKeyword", "Keyword")
  c.link("BlinkCmpKindText", "String")
  c.link("BlinkCmpKindUnit", "Include")
  c.link("BlinkCmpKindConstant", "Constant")
  c.link("BlinkCmpKindEnum", "Constant")
  c.link("BlinkCmpKindEnumMember", "Constant")
  c.link("BlinkCmpKindSnippet", "Number")
  c.link("BlinkCmpKindOperator", "Operator")
  c.link("BlinkCmpKindEvent", "Keyword")
  c.link("BlinkCmpKindInterface", "Interface")
  c.link("BlinkCmpKindDict", "Fg")
  c.link("BlinkCmpKindValue", "StorageClass")
  c.link("BlinkCmpKindTypeParameter", "Type")
  c.link("BlinkCmpKindReference", "Interface")
  c.link("BlinkCmpGhostText", "Comment")

  -- common hl groups for pickers (telescope, fzf-lua, snacks)

  c.hl_with_defaults("PickerBorder", c.P.accent, c.P.treebg)
  c.hl_with_defaults("PickerPromptBorder", c.P.accent, c.P.treebg)
  c.hl_with_defaults("PickerNormal", c.P.fg_dim, c.P.treebg)
  c.hl("PickerTitle", c.P.accent_fg, c.P.accent, conf.attrib.bold)
  c.hl("PickerPromptNormal", c.P.fg_dim, c.P.treebg, conf.attrib.bold)
  c.hl("PickerMatching", c.P.brightteal, c.NONE, conf.attrib.bold)

  c.link("PickerResultsLineNr", "Yellow")
  c.link("PickerPromptPrefix", "Blue")
  c.link("PickerSelection", "TreeCursorLine")

  -- fzf-lua
  c.link("FzfLuaNormal", "PickerNormal")
  c.link("FzfLuaBorder", "PickerBorder")
  c.link("FzfLuaSearch", "PickerMatching")
  c.link("FzfLuaPreviewTitle", "PickerPreviewTitle")
  c.link("FzfLuaCursorLine", "Visual")
  c.link("FzfLuaMatch", "PickerMatching")
  c.link("FzfLuaFzfMatch", "PickerMatching")
  c.link("FzfLuaPathLineNr", "Orange")
  c.link("FzfLuaBufNr", "Brown")
  c.link("FzfLuaBufLineNr", "Number")
  c.link("FzfLuaPreviewTitle", "FloatTitle")
  c.link("FzfLuaTitle", "FloatTitle")

  -- gitsigns
  c.link("GitSignsAdd", "GreenSign")
  c.link("GitSignsStagedAdd", "GreenSign")
  c.link("GitSignsAddNr", "GreenSign")
  c.link("GitSignsStagedAddNr", "GreenSign")
  c.link("GitSignsChange", "BlueSign")
  c.link("GitSignsStagedChange", "BlueSign")
  c.link("GitSignsChangeNr", "BlueSign")
  c.link("GitSignsStagedChangeNr", "BlueSign")
  c.link("GitSignsDelete", "RedSign")
  c.link("GitSignsDeleteNr", "RedSign")
  c.link("GitSignsAddLn", "GreenSign")
  c.link("GitSignsChangeLn", "BlueSign")
  c.link("GitSignsDeleteLn", "RedSign")
  c.link("GitSignsCurrentLineBlame", "Grey")
  c.link("GitSignsAddInline", "Visual")
  c.link("GitSignsChangeInline", "Visual")
  c.link("GitSignsDeleteInline", "Visual")

  c.link("TroubleNormal", "TreeNormalNC")

  -- Glance plugin: https://github.com/DNLHC/glance.nvim
  c.hl_with_defaults("GlancePreviewNormal", c.P.fg, c.P.treebg)
  c.hl_with_defaults("GlancePreviewMatch", c.P.yellow, c.NONE)
  c.hl_with_defaults("GlanceListMatch", c.P.yellow, c.NONE)
  c.link("GlanceListCursorLine", "Visual")

  vim.api.nvim_set_hl(0, "NavicIconsFile",          {bg = c.P.accent[1], fg = c.P.fg[1]})
  vim.api.nvim_set_hl(0, "NavicIconsModule",        {bg = c.P.accent[1], fg = c.P.olive[1]})
  vim.api.nvim_set_hl(0, "NavicIconsNamespace",     {bg = c.P.accent[1], fg = c.P.darkpurple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsPackage",       {bg = c.P.accent[1], fg = c.P.olive[1]})
  vim.api.nvim_set_hl(0, "NavicIconsClass",         {bg = c.P.accent[1], fg = c.P.styled.class[1]})
  vim.api.nvim_set_hl(0, "NavicIconsMethod",        {bg = c.P.accent[1], fg = c.P.brightteal[1]})
  vim.api.nvim_set_hl(0, "NavicIconsProperty",      {bg = c.P.accent[1], fg = c.P.orange[1]})
  vim.api.nvim_set_hl(0, "NavicIconsField",         {bg = c.P.accent[1], fg = c.P.orange[1]})
  vim.api.nvim_set_hl(0, "NavicIconsConstructor",   {bg = c.P.accent[1], fg = c.P.yellow[1]})
  vim.api.nvim_set_hl(0, "NavicIconsEnum",          {bg = c.P.accent[1], fg = c.P.darkpurple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsInterface",     {bg = c.P.accent[1], fg = c.P.purple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsFunction",      {bg = c.P.accent[1], fg = c.P.teal[1]})
  vim.api.nvim_set_hl(0, "NavicIconsVariable",      {bg = c.P.accent[1], fg = c.P.fg[1]})
  vim.api.nvim_set_hl(0, "NavicIconsConstant",      {bg = c.P.accent[1], fg = c.P.purple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsString",        {bg = c.P.accent[1], fg = c.P.string[1]})
  vim.api.nvim_set_hl(0, "NavicIconsNumber",        {bg = c.P.accent[1], fg = c.P.styled.number[1]})
  vim.api.nvim_set_hl(0, "NavicIconsBoolean",       {bg = c.P.accent[1], fg = c.P.deepred[1]})
  vim.api.nvim_set_hl(0, "NavicIconsArray",         {bg = c.P.accent[1], fg = c.P.lpurple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsObject",        {bg = c.P.accent[1], fg = c.P.darkpurple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsKey",           {bg = c.P.accent[1], fg = c.P.darkpurple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsNull",          {bg = c.P.accent[1], fg = c.P.lpurple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsEnumMember",    {bg = c.P.accent[1], fg = c.P.orange[1]})
  vim.api.nvim_set_hl(0, "NavicIconsStruct",        {bg = c.P.accent[1], fg = c.P.darkpurple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsEvent",         {bg = c.P.accent[1], fg = c.P.darkpurple[1]})
  vim.api.nvim_set_hl(0, "NavicIconsOperator",      {bg = c.P.accent[1], fg = c.P.styled.operator[1]})
  vim.api.nvim_set_hl(0, "NavicIconsTypeParameter", {bg = c.P.accent[1], fg = c.P.darkpurple[1]})
  vim.api.nvim_set_hl(0, "NavicText",               {bg = c.P.accent[1], fg = c.P.fg_dim[1]})
  vim.api.nvim_set_hl(0, "NavicSeparator",          {bg = c.P.accent[1], fg = c.P.fg_dim[1]})

  -- snacks
  c.link("SnacksInputTitle", "FloatTitle")
  c.hl_with_defaults("SnacksInputBorder", c.P.brown, c.NONE)

  c.link("SnacksPickerIconModule", "@module")
  c.link("SnacksPickerIconNamespace", "@module")
  c.link("SnacksPickerIconPackage", "@module")
  c.link("SnacksPickerIconClass", "Class")
  c.link("SnacksPickerIconMethod", "Method")
  c.link("SnacksPickerIconProperty", "Member")
  c.link("SnacksPickerIconield", "Member")
  c.link("SnacksPickerIconConstructor", "@constructor")
  c.link("SnacksPickerIconEnum", "@type")
  c.link("SnacksPickerIconInterface", "Interface")
  c.link("SnacksPickerIconFunction", "Function")
  c.link("SnacksPickerIconConstant", "@constant" )
  c.link("SnacksPickerIconString", "String")
  c.link("SnacksPickerIconNumber", "Number")
  c.link("SnacksPickerIconBoolean", "Boolean")
  c.link("SnacksPickerIconObject", "Type")
  c.link("SnacksPickerIconEnumMember", "@constant")
  c.link("SnacksPickerIconStruct", "Struct")
  c.link("SnacksPickerIconOperator", "@operator")
  c.link("SnacksPickerMatch", "Error")
  c.link("SnacksPickerDir", "Comment")
  c.link("SnacksPickerFile", "DefaultLib")

  c.link("SnacksNotifierBorderInfo", "FloatBorder")
  c.link("SnacksNotifierBorderWarn", "FloatBorder")
  c.link("SnacksNotifierBorderDebug", "FloatBorder")
  c.link("SnacksNotifierBorderError", "FloatBorder")
  c.link("SnacksNotifierBorderTrace", "FloatBorder")

  c.link("SnacksNotifierTitleInfo", "NormalFloat")
  c.link("SnacksNotifierTitleWarn", "NormalFloat")
  c.link("SnacksNotifierTitleDebug", "NormalFloat")
  c.link("SnacksNotifierTitleError", "NormalFloat")
  c.link("SnacksNotifierTitleTrace", "NormalFloat")

  c.link("SnacksNotifierInfo", "NormalFloat")
  c.link("SnacksNotifierWarn", "NormalFloat")
  c.link("SnacksNotifierDebug", "NormalFloat")
  c.link("SnacksNotifierError", "NormalFloat")
  c.link("SnacksNotifierTrace", "NormalFloat")

  -- cokeline
  local cokeline_active_bg = c.P.bg4[1]
  c.set_hl(0, "CokelineInactive", { bg = c.P.statuslinebg[1], fg = c.P.bg4[1] })
  c.set_hl(0, "CokelineInactivePad", { bg = c.P.statuslinebg[1], fg = c.P.bg4[1] })
  c.set_hl(0, "CokelineActive", { bg = cokeline_active_bg, fg = c.T.accent_fg })
  c.set_hl(0, "CokelineActivePad", { bg = cokeline_active_bg, fg = c.P.statuslinebg[1]})
  c.set_hl(0, "CokelineActiveModified", { bg = cokeline_active_bg, fg = c.P.red[1] })
  c.set_hl(0, "CokelineInactiveModified", { bg = c.P.statuslinebg[1], fg = c.P.red[1] })
  c.set_hl(0, "CokelineTabSepActive", { fg = c.P.bg4[1], bg = c.P.statuslinebg[1] })
  c.set_hl(0, "CokelineTabSepInactive", { fg = c.P.accent[1], bg = c.P.statuslinebg[1] })

        --fg = function(tab) return (tab.is_first and tab.is_active) and colors.cokeline_colors.focus_bg or colors.P.accent[1] end,
        --bg = colors.cokeline_colors.bg
  -- brenton-leighton multiple-cursors
  c.link("MultipleCursorsCursor", "Search")
  c.link("MultipleCursorsVisual", "CurSearch")
  -- jake-stewart multicursor
  c.link("MultiCursorCursor", "Search")
  c.link("MultiCursorVisual", "CurSearch")
  c.link("MultiCursorDisabledCursor", "DiffText")
  c.link("MultiCursorDisabledVisual", "Visual")

  c.hl_with_defaults("QuickFixLine", c.NONE, c.P.accent)
  -- quick fix
  c.link("qfLineNr", "Number")
  c.link("qfFileName", "String")

  c.hl("htmlH1", c.P.styled.keyword, c.NONE, conf.attrib.bold)
  c.hl("htmlH2", c.P.green, c.NONE, conf.attrib.bold)
  c.hl("htmlH3", c.P.yellow, c.NONE, conf.attrib.bold)
  c.hl("htmlH4", c.P.brown, c.NONE, conf.attrib.bold)
  c.hl("htmlH5", c.P.lila, c.NONE, conf.attrib.bold)
  c.hl("htmlH6", c.P.red, c.NONE, conf.attrib.bold)
  c.hl("htmlLink", c.NONE, c.NONE, { underline = true })
  c.hl("htmlBold", c.NONE, c.NONE, conf.attrib.bold)
  c.hl("htmlBoldUnderline", c.NONE, c.NONE, { bold = true, underline = true })
  c.hl("htmlBoldItalic", c.NONE, c.NONE, { bold = true, italic = true })
  c.hl("htmlBoldUnderlineItalic", c.NONE, c.NONE, { bold = true, underline = true, italic = true })
  c.hl("htmlUnderline", c.NONE, c.NONE, { underline = true })
  c.hl("htmlUnderlineItalic", c.NONE, c.NONE, { underline = true, italic = true })
  c.hl("htmlItalic", c.NONE, c.NONE, conf.attrib.italic)
  c.link("htmlTag", "Braces")
  c.link("htmlEndTag", "Braces")
  c.link("htmlTagN", "Function")
  c.link("htmlTagName", "Function")
  c.link("htmlArg", "Type")
  c.link("htmlScriptTag", "Purple")
  c.link("htmlSpecialTagName", "RedItalic")
  c.link("htmlString", "String")

    -- syn_begin: python
    -- builtin
  c.link("pythonBuiltin", "BlueItalic")
  c.link("pythonExceptions", "KWException")
  c.link("pythonDecoratorName", "OrangeItalic")
    -- syn_begin: help
  c.hl("helpNote", c.P.lpurple, c.NONE, conf.attrib.bold)
  c.hl("helpHeadline", c.P.red, c.NONE, conf.attrib.bold)
  c.hl("helpHeader", c.P.orange, c.NONE, conf.attrib.bold)
  c.link("helpURL", "URL")
  c.hl("helpHyperTextEntry", c.P.blue, c.NONE, conf.attrib.bold)
  c.link("helpHyperTextJump", "Blue")
  c.link("helpCommand", "Yellow")
  c.link("helpExample", "Green")
  c.link("helpSpecial", "Purple")
  c.link("helpSectionDelim", "Grey")
end

local M = {}
function M.set()
  _set()
end

return M

